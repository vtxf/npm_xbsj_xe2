import { GeoPath, GeoPathTracker, TimePosRotType } from "xbsj-xe2/dist-node/xe2-base-objects";
import { PickedInfo, ESSceneObject } from "xbsj-xe2/dist-node/xe2-base-objects";
import { Event, Listener, PartialWithUndefinedReactivePropsToNativeProps, ReactivePropsToNativePropsAndChanged } from "xbsj-xe2/dist-node/xe2-base-utils";
import { XbsjModelWithPoi } from "./XbsjModelWithPoi";
export declare class XbsjModelWithPath extends ESSceneObject {
    static readonly type: string;
    get typeName(): string;
    get defaultProps(): {
        showPoi: boolean | undefined;
        uri: string | undefined;
        textBackgroundColor: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
        maximumScale: number | undefined;
        minimumScale: number | undefined;
        pixelSize: number | undefined;
        originRatioAndOffset: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[leftRatio: number, topRatio: number, leftOffset: number, topOffset: number]>;
        localPosition: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number] | undefined>;
        localRotation: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number] | undefined>;
        localScale: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number] | undefined>;
        polylineShow: boolean;
        currentPoiShow: boolean;
        loop: boolean;
        currentTime: number;
        duration: number | undefined;
        playing: boolean;
        speed: number;
        width: number;
        ground: boolean;
        color: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
        hasDash: boolean;
        gapColor: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
        dashLength: number;
        dashPattern: number;
        hasArrow: boolean;
        depthTest: boolean;
        leadTime: number;
        trailTime: number;
        allowPicking: boolean;
        show: boolean | undefined;
        showOnlyWithPath: boolean | undefined;
        pathUri: string | undefined;
        timeText: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[startTime: number, stopTime: number, text: string][] | undefined>;
        playerId: string | undefined;
        offsetTime: number | undefined;
        execOnceFuncStr: string | undefined;
        updateFuncStr: string | undefined;
        toDestroyFuncStr: string | undefined;
        name: string;
        ref: string | undefined;
        devTags: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<string[] | undefined>;
        extras: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<import("xbsj-xe2/dist-node/xe2-base-utils").JsonValue>;
    };
    get json(): JsonType;
    set json(value: JsonType);
    private _pickedEvent;
    get pickedEvent(): Event<[PickedInfo]>;
    private _flyToEvent;
    get flyToEvent(): Listener<[number | undefined]>;
    flyTo(duration?: number): void;
    private _xbsjModelWithPoi;
    get xbsjModelWithPoi(): XbsjModelWithPoi;
    private _geoPath;
    get geoPath(): GeoPath;
    private _geoPathTracker;
    get geoPathTracker(): GeoPathTracker;
    get ratio(): number;
    set ratio(value: number);
    get ratioChanged(): Listener<[number, number]>;
    static timeTextMd: string;
    constructor(id?: string);
    get timePosRots(): TimePosRotType[] | undefined;
    set timePosRots(value: TimePosRotType[] | undefined);
    get timePosRotsChanged(): Listener<[TimePosRotType[] | undefined, TimePosRotType[] | undefined]>;
    get position(): [number, number, number] | undefined;
    get positionChanged(): Listener<[[number, number, number] | undefined, [number, number, number] | undefined]>;
    get rotation(): [number, number, number] | undefined;
    get rotationChanged(): Listener<[[number, number, number] | undefined, [number, number, number] | undefined]>;
    getProperties(language?: string): import("xbsj-xe2/dist-node/xe2-base-objects").Property[];
}
declare const extraComponentProps: {
    showPoi: boolean | undefined;
    uri: string | undefined;
    textBackgroundColor: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
    maximumScale: number | undefined;
    minimumScale: number | undefined;
    pixelSize: number | undefined;
    originRatioAndOffset: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[leftRatio: number, topRatio: number, leftOffset: number, topOffset: number]>;
    localPosition: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number] | undefined>;
    localRotation: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number] | undefined>;
    localScale: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number] | undefined>;
    polylineShow: boolean;
    currentPoiShow: boolean;
    loop: boolean;
    currentTime: number;
    duration: number | undefined;
    playing: boolean;
    speed: number;
    width: number;
    ground: boolean;
    color: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
    hasDash: boolean;
    gapColor: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
    dashLength: number;
    dashPattern: number;
    hasArrow: boolean;
    depthTest: boolean;
    leadTime: number;
    trailTime: number;
    allowPicking: boolean;
};
export declare namespace XbsjModelWithPath {
    const createDefaultProps: () => {
        show: boolean | undefined;
        showOnlyWithPath: boolean | undefined;
        pathUri: string | undefined;
        timeText: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[startTime: number, stopTime: number, text: string][] | undefined>;
        playerId: string | undefined;
        offsetTime: number | undefined;
        execOnceFuncStr: string | undefined;
        updateFuncStr: string | undefined;
        toDestroyFuncStr: string | undefined;
        name: string;
        ref: string | undefined;
        devTags: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<string[] | undefined>;
        extras: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<import("xbsj-xe2/dist-node/xe2-base-utils").JsonValue>;
    };
}
export interface XbsjModelWithPath extends ReactivePropsToNativePropsAndChanged<ReturnType<typeof XbsjModelWithPath.createDefaultProps> & typeof extraComponentProps> {
}
declare type JsonType = PartialWithUndefinedReactivePropsToNativeProps<ReturnType<typeof XbsjModelWithPath.createDefaultProps> & typeof extraComponentProps & {
    type: string;
}>;
export {};
