export declare const CzmImageryProviderJsonTypeMd = "\n# \u793A\u4F8B\n\n* Cesium\u79BB\u7EBF\u5F71\u50CF\n```javascript\n{\n    \"type\": \"TileMapServiceImageryProvider\",\n    \"url\": \"${czm-path}/Assets/Textures/NaturalEarthII\"\n}\n```\n\n* \u9AD8\u5FB7\u5F71\u50CF\n```javascript\n{\n    \"type\": \"UrlTemplateImageryProvider\",\n    \"url\": \"//webst02.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}\"\n}\n```\n\n* \u8C37\u6B4C\u5F71\u50CF\n```javascript\n{\n    \"type\": \"UrlTemplateImageryProvider\",\n    \"url\": \"https://gac-geo.googlecnapps.cn/maps/vt?lyrs=s&x={x}&y={y}&z={z}\"\n}\n```\n\n* \u5929\u5730\u56FE\u5F71\u50CF(\u58A8\u5361\u6258\u5207\u7247)\n```javascript\n{\n    \"type\": \"UrlTemplateImageryProvider\",\n    \"url\": \"https://{s}.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=85c9d12d5d691d168ba5cb6ecaa749eb\",\n    \"subdomains\": [\"t0\", \"t1\", \"t2\", \"t3\", \"t4\", \"t5\", \"t6\", \"t7\"]\n}\n```\n\n* \u5929\u5730\u56FE\u5F71\u50CF(\u7ECF\u7EAC\u5EA6\u5207\u7247)\n```javascript\n{\n    \"type\": \"UrlTemplateImageryProvider\",\n    \"url\": \"https://{s}.tianditu.gov.cn/img_c/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=c&FORMAT=tiles&TILEMATRIX={zz}&TILEROW={y}&TILECOL={x}&tk=85c9d12d5d691d168ba5cb6ecaa749eb\",\n    \"subdomains\": [ \"t0\", \"t1\", \"t2\", \"t3\", \"t4\", \"t5\", \"t6\", \"t7\" ],\n    \"tilingScheme\": { \"type\": \"GeographicTilingScheme\" },\n    \"customTags\": { \"zz\": \"(imageryProvider, x, y, level) => level + 1\" }\n}\n```\n\n* \u5929\u5730\u56FE\u5730\u540D(\u58A8\u5361\u6258\u5207\u7247)\n```javascript\n{\n    \"type\": \"UrlTemplateImageryProvider\",\n    \"url\": \"https://{s}.tianditu.gov.cn/cia_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cia&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=85c9d12d5d691d168ba5cb6ecaa749eb\",\n    \"subdomains\": [\"t0\", \"t1\", \"t2\", \"t3\", \"t4\", \"t5\", \"t6\", \"t7\"]\n}\n```\n\n# \u58F0\u660E\u6587\u4EF6\n\n### CzmTilingSchemaJsonType\n```javascript\n    export type CzmTilingSchemaJsonType = {\n        type: 'WebMercatorTilingScheme';\n        ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\tEllipsoid.WGS84\toptional The ellipsoid whose surface is being tiled. Defaults to the WGS84 ellipsoid.\n        numberOfLevelZeroTilesX?: number; //\tNumber\t1\toptional The number of tiles in the X direction at level zero of the tile tree.\n        numberOfLevelZeroTilesY?: number; //\tNumber\t1\toptional The number of tiles in the Y direction at level zero of the tile tree.\n        rectangleSouthwestInMeters?: [number, number]; //\tCartesian2\t\toptional The southwest corner of the rectangle covered by the tiling scheme, in meters. If this parameter or rectangleNortheastInMeters is not specified, the entire globe is covered in the longitude direction and an equal distance is covered in the latitude direction, resulting in a square projection.\n        rectangleNortheastInMeters?: [number, number]; //\tCartesian2\t\toptional The northeast corner of the rectangle covered by the tiling scheme, in meters. If this parameter or rectangleSouthwestInMeters is not specified, the entire globe is covered in the longitude direction and an equal distance is covered in the latitude direction, resulting in a square projection.\n    } | {\n        type: 'GeographicTilingScheme';\n        ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\tEllipsoid.WGS84\toptionalThe ellipsoid whose surface is being tiled. Defaults to the WGS84 ellipsoid.\n        rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\tRectangle.MAX_VALUE\toptional The rectangle, in radians, covered by the tiling scheme.\n        numberOfLevelZeroTilesX?: number; //\tNumber\t2\toptional The number of tiles in the X direction at level zero of the tile tree.\n        numberOfLevelZeroTilesY?: number; //\tNumber\t1\toptional The number of tiles in the Y direction at level zero of the tile tree.\n    } | {\n        type: 'ToGCJ02WebMercatorTilingScheme';\n        ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\tEllipsoid.WGS84\toptional The ellipsoid whose surface is being tiled. Defaults to the WGS84 ellipsoid.\n        numberOfLevelZeroTilesX?: number; //\tNumber\t1\toptional The number of tiles in the X direction at level zero of the tile tree.\n        numberOfLevelZeroTilesY?: number; //\tNumber\t1\toptional The number of tiles in the Y direction at level zero of the tile tree.\n        rectangleSouthwestInMeters?: [number, number]; //\tCartesian2\t\toptional The southwest corner of the rectangle covered by the tiling scheme, in meters. If this parameter or rectangleNortheastInMeters is not specified, the entire globe is covered in the longitude direction and an equal distance is covered in the latitude direction, resulting in a square projection.\n        rectangleNortheastInMeters?: [number, number]; //\tCartesian2\t\toptional The northeast corner of the rectangle covered by the tiling scheme, in meters. If this parameter or rectangleSouthwestInMeters is not specified, the entire globe is covered in the longitude direction and an equal distance is covered in the latitude direction, resulting in a square projection.\n    } | {\n        type: 'ToWGS84WebMercatorTilingScheme';\n        ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\tEllipsoid.WGS84\toptional The ellipsoid whose surface is being tiled. Defaults to the WGS84 ellipsoid.\n        numberOfLevelZeroTilesX?: number; //\tNumber\t1\toptional The number of tiles in the X direction at level zero of the tile tree.\n        numberOfLevelZeroTilesY?: number; //\tNumber\t1\toptional The number of tiles in the Y direction at level zero of the tile tree.\n        rectangleSouthwestInMeters?: [number, number]; //\tCartesian2\t\toptional The southwest corner of the rectangle covered by the tiling scheme, in meters. If this parameter or rectangleNortheastInMeters is not specified, the entire globe is covered in the longitude direction and an equal distance is covered in the latitude direction, resulting in a square projection.\n        rectangleNortheastInMeters?: [number, number]; //\tCartesian2\t\toptional The northeast corner of the rectangle covered by the tiling scheme, in meters. If this parameter or rectangleSouthwestInMeters is not specified, the entire globe is covered in the longitude direction and an equal distance is covered in the latitude direction, resulting in a square projection.\n    }\n```\n\n### CzmImageryProviderJsonType\n```javascript\n    type CzmImageryProviderJsonType =\n        {\n            type: 'ArcGisMapServerImageryProvider';\n            url: string,\n            token?: string,\n            tileDiscardPolicy?: Cesium.TileDiscardPolicy,\n            usePreCachedTilesIfAvailable?: boolean,\n            layers?: string,\n            enablePickFeatures?: boolean,\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            tilingScheme?: CzmTilingSchemaJsonType; //\tTilingScheme\t<optional> The tiling scheme specifying how the ellipsoidal surface is broken into tiles. If this parameter is not provided, a WebMercatorTilingScheme is used.\n            ellipsoid?: [x: number, y: number, z: number];\n            credit?: string; //\tCredit | String\t<optional> ''\tA credit for the data source, which is displayed on the canvas.\n            tileWidth?: number;\n            tileHeight?: number;\n            maximumLevel?: number;\n        } |\n        {\n            type: 'BingMapsImageryProvider';\n            url: string,\n            key: string,\n            tileProtocol?: string,\n            mapStyle?: CzmBingMapsStyle,\n            culture?: string,\n            tileDiscardPolicy?: Cesium.TileDiscardPolicy,\n            ellipsoid?: [x: number, y: number, z: number];\n        } |\n        {\n            type: 'GoogleEarthEnterpriseImageryProvider';\n            url: string,\n            metadata: string,\n            tileDiscardPolicy?: Cesium.TileDiscardPolicy,\n            ellipsoid?: [x: number, y: number, z: number];\n            credit?: string;\n        } |\n        {\n            type: 'GridImageryProvider';\n            tilingScheme?: CzmTilingSchemaJsonType;\n            ellipsoid?: [x: number, y: number, z: number];\n            cells?: number;\n            color?: [number, number, number, number];\n            glowColor?: [number, number, number, number];\n            glowWidth?: number;\n            backgroundColor?: [number, number, number, number];\n            tileWidth?: number;\n            tileHeight?: number;\n            canvasSize?: number;\n        } |\n        {\n            type: 'IonImageryProvider';\n            assetId: number,\n            accessToken?: string,\n            server?: string\n        } |\n        {\n            type: 'MapboxImageryProvider';\n            url?: string,\n            mapId: string,\n            accessToken: string,\n            format?: string,\n            ellipsoid?: [x: number, y: number, z: number];\n            minimumLevel?: number; //\tNumber\t<optional> 0\tThe minimum level-of-detail supported by the imagery provider. Take care when specifying this that the number of tiles at the minimum level is small, such as four or less. A larger number is likely to result in rendering problems.\n            maximumLevel?: number;\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            credit?: string;\n\n        } |\n        {\n            type: 'MapboxStyleImageryProvider';\n            url?: string,\n            username?: string,\n            styleId: string,\n            accessToken: string,\n            tilesize?: number,\n            scaleFactor?: boolean,\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            credit?: string; //\tCredit | String\t<optional> ''\tA credit for the data source, which is displayed on the canvas.\n            ellipsoid?: [x: number, y: number, z: number];\n            minimumLevel?: number; //\tNumber\t<optional> 0\tThe minimum level-of-detail supported by the imagery provider. Take care when specifying this that the number of tiles at the minimum level is small, such as four or less. A larger number is likely to result in rendering problems.\n            maximumLevel?: number;\n\n        } |\n        {\n            type: 'OpenStreetMapImageryProvider';\n            url: string,\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            credit?: string; //\tCredit | String\t<optional> ''\tA credit for the data source, which is displayed on the canvas.\n            ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\t<optional> The ellipsoid. If the tilingScheme is specified, this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither parameter is specified, the WGS84 ellipsoid is used.\n            minimumLevel?: number; //\tNumber\t<optional> 0\tThe minimum level-of-detail supported by the imagery provider. Take care when specifying this that the number of tiles at the minimum level is small, such as four or less. A larger number is likely to result in rendering problems.\n            maximumLevel?: number; //\tNumber\t<optional> The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n            fileExtension?: string;\n        } |\n        {\n            type: 'SingleTileImageryProvider';\n            url: string,\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            credit?: string; //\tCredit | String\t<optional> ''\tA credit for the data source, which is displayed on the canvas.\n            ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\t<optional> The ellipsoid. If the tilingScheme is specified, this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither parameter is specified, the WGS84 ellipsoid is used.\n        } |\n        {\n            type: 'TileCoordinatesImageryProvider';\n            tilingScheme?: CzmTilingSchemaJsonType; //\tTilingScheme\t<optional> The tiling scheme specifying how the ellipsoidal surface is broken into tiles. If this parameter is not provided, a WebMercatorTilingScheme is used.\n            ellipsoid?: [x: number, y: number, z: number];//\tEllipsoid\t<optional> The ellipsoid. If the tilingScheme is specified, this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither parameter is specified, the WGS84 ellipsoid is used.\n            color: [number, number, number, number];\n            tileWidth?: number; //\tNumber\t<optional> 256\tPixel width of image tiles.\n            tileHeight?: number; //\tNumber\t<optional> 256\tPixel height of image tiles.\n\n        } |\n        {\n            type: 'TileMapServiceImageryProvider';\n            url?: string; //\tResource | String | Promise.<Resource> | Promise.<String>\t<optional> '.'\tPath to image tiles on server.\n            fileExtension?: string; //\tString\t<optional> 'png'\tThe file extension for images on the server.\n            credit?: string; //\tCredit | String\t<optional> ''\tA credit for the data source, which is displayed on the canvas.\n            minimumLevel?: number; //\tNumber\t<optional> 0\tThe minimum level-of-detail supported by the imagery provider. Take care when specifying this that the number of tiles at the minimum level is small, such as four or less. A larger number is likely to result in rendering problems.\n            maximumLevel?: number; //\tNumber\t<optional> The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            tilingScheme?: CzmTilingSchemaJsonType; //\tTilingScheme\t<optional> The tiling scheme specifying how the ellipsoidal surface is broken into tiles. If this parameter is not provided, a WebMercatorTilingScheme is used.\n            ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\t<optional> The ellipsoid. If the tilingScheme is specified, this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither parameter is specified, the WGS84 ellipsoid is used.\n            tileWidth?: number; //\tNumber\t<optional> 256\tPixel width of image tiles.\n            tileHeight?: number; //\tNumber\t<optional> 256\tPixel height of image tiles.\n            flipXY?: boolean; //\tBoolean\t<optional> Older versions of gdal2tiles.py flipped X and Y values in tilemapresource.xml. Specifying this option will do the same, allowing for loading of these incorrect tilesets.\n        } |\n        {\n            type: 'UrlTemplateImageryProvider';\n            url: string;//Resource | String\n            subdomains?: string | string[];//String | Array.<String>\n            credit?: string;//Credit | String\n            minimumLevel?: number; //\tNumber\t<optional> 0\tThe minimum level-of-detail supported by the imagery provider. Take care when specifying this that the number of tiles at the minimum level is small, such as four or less. A larger number is likely to result in rendering problems.\n            maximumLevel?: number; //\tNumber\t<optional> The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            tilingScheme?: CzmTilingSchemaJsonType; //\tTilingScheme\t<optional> The tiling scheme specifying how the ellipsoidal surface is broken into tiles. If this parameter is not provided, a WebMercatorTilingScheme is used.\n            ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\t<optional> The ellipsoid. If the tilingScheme is specified, this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither parameter is specified, the WGS84 ellipsoid is used.\n            tileWidth?: number; //\tNumber\t<optional> 256\tPixel width of image tiles.\n            tileHeight?: number; //\tNumber\t<optional> 256\tPixel height of image tiles.\n            hasAlphaChannel?: boolean;\n            pickFeaturesUrl?: string;//Resource | String\n            enablePickFeatures?: boolean;\n            urlSchemeZeroPadding?: JsonValue,\n            getFeatureInfoFormats?: Array<Cesium.GetFeatureInfoFormat>;\n            customTags?: JsonValue;\n        } |\n        {\n            type: 'WebMapServiceImageryProvider';\n            url: string;\n            layers: string;\n            parameters?: JsonValue,\n            getFeatureInfoParameters?: JsonValue,\n            getFeatureInfoFormats?: Array<Cesium.GetFeatureInfoFormat>,\n            enablePickFeatures?: boolean,\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle, in radians, covered by the image.\n            tilingScheme?: CzmTilingSchemaJsonType; //\tTilingScheme\t<optional> The tiling scheme specifying how the ellipsoidal surface is broken into tiles. If this parameter is not provided, a WebMercatorTilingScheme is used.\n            ellipsoid?: [x: number, y: number, z: number];//\tEllipsoid\t<optional> The ellipsoid. If not specified, the WGS84 ellipsoid is used.\n            minimumLevel?: number; //\tNumber\t<optional> 0\tThe minimum level-of-detail supported by the imagery provider.\n            maximumLevel?: number; //\tNumber\t<optional> The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n            tileWidth?: number; //\tNumber\t<optional> 256\tThe tile width in pixels.\n            tileHeight?: number; //\tNumber\t<optional> 256\tThe tile height in pixels.\n            crs?: string,\n            srs?: string,\n            credit?: string;//Credit | String\n            subdomains?: string | string[]; //\tString | Array.<String>\t<optional> 'abc'\tThe subdomains to use for the {s} placeholder in the URL template. If this parameter is a single string, each character in the string is a subdomain. If it is an array, each element in the array is a subdomain.\n            clock: Cesium.Clock; // //\tClock\t<optional> A Clock instance that is used when determining the value for the time dimension. Required when times is specified.\n            times?: CzmTimeIntervalCollectionJsonType;  //\tTimeIntervalCollection\t<optional> TimeIntervalCollection: string; // with its data property being an object containing time dynamic dimension and their values.\n            getFeatureInfoUrl?: string\n        } |\n        {\n            type: 'WebMapTileServiceImageryProvider';\n            url: string; //\tResource | String\t\t\tThe base URL for the WMTS GetTile operation (for KVP-encoded requests) or the tile-URL template (for RESTful requests). The tile-URL template should contain the following variables: {style}, {TileMatrixSet}, {TileMatrix}, {TileRow}, {TileCol}. The first two are optional if actual values are hardcoded or not required by the server. The {s} keyword may be used to specify subdomains.\n            format?: string; //\tString\t<optional> 'image/jpeg'\tThe MIME type for images to retrieve from the server.\n            layer: string; //\tString\t\t\tThe layer name for WMTS requests.\n            style: string; //\tString\t\t\tThe style name for WMTS requests.\n            tileMatrixSetID: string; //\tString\t\t\tThe identifier of the TileMatrixSet to use for WMTS requests.\n            tileMatrixLabels?: string[]; //\tArray\t<optional> A list of identifiers in the TileMatrix to use for WMTS requests, one per TileMatrix level.\n            clock: Cesium.Clock, // //\tClock\t<optional> A Clock instance that is used when determining the value for the time dimension. Required when times is specified.\n            times?: CzmTimeIntervalCollectionJsonType; //\tTimeIntervalCollection\t<optional> TimeIntervalCollection: string; // with its data property being an object containing time dynamic dimension and their values.\n            dimensions?: JsonValue; //\tObject\t<optional> A object containing static dimensions and their values.\n            tileWidth?: number; //\tNumber\t<optional> 256\tThe tile width in pixels.\n            tileHeight?: number; //\tNumber\t<optional> 256\tThe tile height in pixels.\n            tilingScheme?: CzmTilingSchemaJsonType; //\tTilingScheme\t<optional> The tiling scheme corresponding to the organization of the tiles in the TileMatrixSet.\n            rectangle?: [west: number, south: number, east: number, north: number]; //\tRectangle\t<optional> Rectangle.MAX_VALUE\tThe rectangle covered by the layer.\n            minimumLevel?: number; //\tNumber\t<optional> 0\tThe minimum level-of-detail supported by the imagery provider.\n            maximumLevel?: number; //\tNumber\t<optional> The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n            ellipsoid?: [x: number, y: number, z: number]; //\tEllipsoid\t<optional> The ellipsoid. If not specified, the WGS84 ellipsoid is used.\n            credit?: string; //\tCredit | String\t<optional> A credit for the data source, which is displayed on the canvas.\n            subdomains?: string | string[]; //\tString | Array.<String>\t<optional> 'abc'\tThe subdomains to use for the {s} placeholder in the URL template. If this parameter is a single string, each character in the string is a subdomain. If it is an array, each element in the array is a subdomain.\n        };\n\n```\n";
