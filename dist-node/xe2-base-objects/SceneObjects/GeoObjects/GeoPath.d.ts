import { PickedInfo } from "../../scene-manager";
import { Event, Listener, PartialWithUndefinedReactivePropsToNativeProps, ReactivePropsToNativePropsAndChanged } from "xbsj-xe2/dist-node/xe2-base-utils";
import { SceneObjectKey } from "xbsj-xe2/dist-node/xe2-utils";
import { ESSceneObject } from "../ESSceneObject";
import { GeoCanvasPointPoi } from "./GeoCanvasPointPoi";
import { GeoPolyline } from "./GeoPolyline";
import { Player } from "../MiscObjects/Player";
declare type CurrentInfoType = {
    position: [number, number, number];
    rotation: [number, number, number] | undefined;
    index: number;
    ratio: number;
};
export declare type RotLerpModeType = 'Lerp' | 'Prev' | 'Next';
declare function computeRotIfUndefined(timePosRots: TimePosRotType[], force?: boolean): TimePosRotType[];
declare function subdivide(timePosRots: TimePosRotType[], arcType?: "GEODESIC" | "NONE" | "RHUMB", granularity?: number): TimePosRotType[];
declare function parseData(text: string): TimePosRotType[] | undefined;
export declare class GeoPath extends ESSceneObject {
    static readonly type: string;
    get typeName(): string;
    get defaultProps(): {
        show: boolean;
        currentPoiShow: boolean;
        timePosRots: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<TimePosRotType[] | undefined>;
        autoComputeTimeFromTimePosRots: boolean;
        leadTime: number;
        trailTime: number;
        startTime: number | undefined;
        stopTime: number | undefined;
        loop: boolean;
        currentTime: number;
        duration: number | undefined;
        speed: number;
        playing: boolean;
        polylineShow: boolean;
        width: number;
        ground: boolean;
        color: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
        hasDash: boolean;
        gapColor: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
        dashLength: number;
        dashPattern: number;
        hasArrow: boolean;
        depthTest: boolean;
        allowPicking: boolean;
        dataUri: string;
        dataText: string | undefined;
        rotLerpMode: string;
        execOnceFuncStr: string | undefined;
        updateFuncStr: string | undefined;
        toDestroyFuncStr: string | undefined;
        name: string;
        ref: string | undefined;
        devTags: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<string[] | undefined>;
        extras: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<import("xbsj-xe2/dist-node/xe2-base-utils").JsonValue>;
    };
    get json(): JsonType;
    set json(value: JsonType);
    private _scratchCurrentInfo;
    private _currentInfo;
    get currentInfo(): CurrentInfoType | undefined;
    get currentInfoChanged(): Listener<[CurrentInfoType | undefined, CurrentInfoType | undefined]>;
    get currentIndex(): number | undefined;
    get currentIndexChanged(): Listener<[CurrentInfoType | undefined, CurrentInfoType | undefined]>;
    get currentPosition(): [number, number, number] | undefined;
    get currentPositionChanged(): Listener<[CurrentInfoType | undefined, CurrentInfoType | undefined]>;
    get currentRotation(): [number, number, number] | undefined;
    get currentRotationChanged(): Listener<[CurrentInfoType | undefined, CurrentInfoType | undefined]>;
    private _player;
    get player(): Player;
    private _geoPolyline;
    get geoPolyline(): GeoPolyline;
    private _geoCanvasPointPoi;
    get geoCanvasPointPoi(): GeoCanvasPointPoi;
    private _flyToEvent;
    get flyToEvent(): Listener<[number | undefined]>;
    flyTo(duration?: number): void;
    private _pickedEvent;
    get pickedEvent(): Event<[PickedInfo]>;
    getCurrent(timeStamp: number, rotLerpMode?: RotLerpModeType): {
        position: [number, number, number];
        rotation: [number, number, number] | undefined;
        index: number;
        ratio: number;
    } | undefined;
    subPath(startTimeStamp: number, stopTimeStamp: number): TimePosRotType[] | undefined;
    static computeRotIfUndefined: typeof computeRotIfUndefined;
    computeRotIfUndefined(force?: boolean): void;
    static subdivide: typeof subdivide;
    subdivide(arcType?: "GEODESIC" | "NONE" | "RHUMB", granularity?: number): void;
    computeTimeFromTimePosRots(): void;
    static parseData: typeof parseData;
    static defaults: {
        timePosRots: TimePosRotType[];
        startTime: number;
        stopTime: number;
        loop: boolean;
        duration: number;
        playing: boolean;
        dataText: string;
        viewerTagsEnums: [string, string][];
    };
    constructor(id?: SceneObjectKey);
    get ratio(): number;
    set ratio(value: number);
    get ratioChanged(): Listener<[number, number]>;
    static timePosRotsMd: string;
    getProperties(language?: string): import("../ESSceneObject").Property[];
}
export declare type TimePosRotType = [timeStamp: number, position: [longitude: number, latitude: number, height: number], rotation?: [heading: number, pitch: number, roll: number] | undefined];
export declare namespace GeoPath {
    const createDefaultProps: () => {
        show: boolean;
        currentPoiShow: boolean;
        timePosRots: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<TimePosRotType[] | undefined>;
        autoComputeTimeFromTimePosRots: boolean;
        leadTime: number;
        trailTime: number;
        startTime: number | undefined;
        stopTime: number | undefined;
        loop: boolean;
        currentTime: number;
        duration: number | undefined;
        speed: number;
        playing: boolean;
        polylineShow: boolean;
        width: number;
        ground: boolean;
        color: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
        hasDash: boolean;
        gapColor: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<[number, number, number, number]>;
        dashLength: number;
        dashPattern: number;
        hasArrow: boolean;
        depthTest: boolean;
        allowPicking: boolean;
        dataUri: string;
        dataText: string | undefined;
        rotLerpMode: string;
        execOnceFuncStr: string | undefined;
        updateFuncStr: string | undefined;
        toDestroyFuncStr: string | undefined;
        name: string;
        ref: string | undefined;
        devTags: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<string[] | undefined>;
        extras: import("xbsj-xe2/dist-node/xe2-base-utils").ReactiveVariable<import("xbsj-xe2/dist-node/xe2-base-utils").JsonValue>;
    };
}
export interface GeoPath extends ReactivePropsToNativePropsAndChanged<ReturnType<typeof GeoPath.createDefaultProps>> {
}
declare type JsonType = PartialWithUndefinedReactivePropsToNativeProps<ReturnType<typeof GeoPath.createDefaultProps> & {
    type: string;
}>;
export {};
